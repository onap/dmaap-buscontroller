#!/bin/sh
#
# ============LICENSE_START===============================================
# org.onap.dmaap
# ========================================================================
# Copyright Â© 2019 AT&T Intellectual Property. All rights reserved.
# Copyright (C) 2021 Nordix Foundation
# ========================================================================
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============LICENSE_END=================================================
# ECOMP is a trademark and service mark of AT&T Intellectual Property.

umask 0022
set -uex -o pipefail
export PATH=/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin

# RESP_CACHE is(/opt/app/config/cache) empty-dir volume mount for K8s env
RESP_CACHE=${RESP_CACHE:-'/dev/null'}
APP_ROOT=${APP_ROOT:-/opt/app/dbc-client}
CONFIGMAP_ROOT=${CONFIGMAP_ROOT:-/opt/app/config}

PORT=${PORT:-8443}
DBC=${DBC:-dmaap-bc}
PROTO=${PROTO:-https}
PARAM=${PARAM:-'useExisting=true'}
REQUEST_ID=${REQUEST_ID:-dbc-client}
URL=${URL:-"${PROTO}"://"${DBC}":"${PORT}"/webapi/}

CA_PEM=${CA_PEM:-ca.pem}
KEY_PEM=${KEY_PEM:-key.pem}
CLIENT_PEM=${CLIENT_PEM:-client.pem}
PEM_DIR=${PEM_DIR:-/opt/app/osaaf/local}
CERT_PWD=${CERT_PWD:-'2U[iOZzMHI:.#tdCwlBqc;}S'}

BA_PWD=${BA_PWD:-'demo123456!'}
AUTH_METHOD=${AUTH_METHOD:-basicAuth}
BA_IDENTITY=${BA_IDENTITY:-dmaap-bc@dmaap-bc.onap.org}

function xcurl() {
  curl -X POST \
    -s "$CURL_CRED" \
    -w "%{http_code}" \
    -H "X-ECOMP-RequestID: $REQUEST_ID" \
    -H "Content-Type: application/json" "$@"
}

function init_config() {
  if [ ! -d "$APP_ROOT" -a ! -d "$CONFIGMAP_ROOT" ]; then
    echo "Expected either App root directory $APP_ROOT Or ConfigMap directory $CONFIGMAP_ROOT does not exist."
    exit 1
  fi
  cd "$PEM_DIR"
  if [ "$AUTH_METHOD" = "basicAuth" ]; then
    echo "-u ${BA_IDENTITY}:${BA_PWD}" >"$PEM_DIR"/curl.cred
    CURL_CRED="-K $PEM_DIR/curl.cred"
  elif [ -f "$CA_PEM" -a -f "$CLIENT_PEM" -a -f "$KEY_PEM" ]; then
    printf "key \"$PEM_DIR/$KEY_PEM\"\n cacert \"$PEM_DIR/$CA_PEM\"\n cert \"$PEM_DIR/${CLIENT_PEM}:${CERT_PWD}\"" >$PEM_DIR/curl.cred
    CURL_CRED="-K $PEM_DIR/curl.cred"
  else
    echo "PEM files for authorization not found..!"
  fi
}

function init_dbc_provisioning() {
  cd "$CONFIGMAP_ROOT"
  for dir in dmaap dcaeLocations mr_clusters topics mr_clients dr_nodes feeds dr_pubs dr_subs; do
    if [ -d ${dir} ]; then
      for file in $(ls ${dir}/*.json); do
        do_http_post "$file" "$dir"
      done
    fi
  done
}

function do_http_post() {
  RETRY_TIME=60
  RESP_FILE=$(echo "${1##*/}" | cut -d "." -f1)
  while true; do
    if [ "$2" != "feeds" ]; then
      rc=$(xcurl -o "$RESP_CACHE"/"$RESP_FILE"-resp.json -d @"${1}" "${URL}${2}")
      if [ "$rc" = "200" -o "$rc" = "201" -o "$rc" = "409" ]; then
        echo "Http Post request is successful with response code=$rc"
        break
      fi
    else
      rc=$(xcurl -o "$RESP_CACHE"/"$RESP_FILE"-resp.json -d @"${1}" "${URL}${2}"/?"${PARAM}")
      if [ "$rc" = "200" -o "$rc" = "201" -o "$rc" = "409" ]; then
        echo "Http Post request for feed creation is successful with response code=$rc"
        break
      fi
    fi
    echo "$(date): Http Response code=$rc.  Will retry after $RETRY_TIME seconds.."
    sleep "$RETRY_TIME"
  done
}

init_config
init_dbc_provisioning
